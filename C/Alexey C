#include <stdio.h>
#include <time.h>
#include <stdlib.h>

/**
Structure City enthält eindeutige ID, Stadtbezeichnung und Eigenschaft visited
**/
struct City {
  int id;
  char name[20];
  int visited;
};

// Liste der Städte, kann auch aus der stadt.dat Datei geladen werden
struct City city[] = {
  {101,"Michelbinge" },
{22,"Nuernberg" },
{106,"Hagsend" },
{103,"Wasserau" },
{7,"SanktPoelten" },
{21,"Frankfurt" },
{112,"Osgiliath" },
{2,"Graz" },
{27,"Hannover" },
{26,"Berlin" },
{104,"Untertuermen" },
{28,"Hamburg" },
{115,"Barad-dur" },
{114,"Morannon" },
{105,"Neuburg" },
{3,"Linz" },
{110,"Bruchtal" },
{30,"Dortmund" },
{118,"Edoras" },
{109,"Dornbuehl" },
{24,"Dresden" },
{100,"Moria" },
{108,"Bockenburg" },
{23,"Stuttgart" },
{20,"Muenchen" },
{113,"MinasTirith" },
{4,"Innsbruck" },
{111,"Isengard" },
{119,"Aldburg" },
{25,"Leipzig" },
{6,"Wien" },
{116,"Orodruin" },
{117,"HelmsKlamm" },
{102,"Hobbingen" },
{29,"Bremen" },
{1,"Salzburg" },
{5,"Klagenfurt" },
{107,"Krickloch" }
};

//Liste der Strassen {CityID1, CityID2}, kann auch aus der strasse.dat Datei geladen werden
//Stellt die Kanten eines ungerichteten Graphen dar.
int street[][2] = {
{100,110 },
{100,111 },
{100,114 },
{101,102 },
{102,103 },
{103,105 },
{103,106 },
{104,101 },
{104,102 },
{105,107 },
{105,110 },
{106,100 },
{107,108 },
{108,109 },
{109,106 },
{111,117 },
{111,118 },
{112,113 },
{112,114 },
{114,116 },
{115,114 },
{116,115 },
{117,118 },
{118,119 },
{119,112 },
{119,113 },
{119,114 },
{1,20 },
{1,3 },
{1,4 },
{1,5 },
{20,22 },
{20,4 },
{22,21 },
{22,24 },
{22,25 },
{24,26 },
{26,27 },
{26,28 },
{27,28 },
{27,29 },
{27,30 },
{28,29 },
{29,30 },
{30,21 },
{30,25 },
{3,2 },
{3,22 },
{3,7 },
{5,2 },
{6,2 },
{7,6 }
};

//Pointer auf erste besuchte Stadt
struct City *start;

//Funktion liefert die Eigenschaft visited zurück. 0=nicht besucht, 1= besucht.
int visited(int cityId){
  int res = 0;
  for(int i = 0; i < sizeof(city) / sizeof(city[0]); i++){
     if(city[i].id == cityId){
        if(city[i].visited == 1) res = 1;
     } 
  }
  return res;
}

/** 
Funktion durchsucht alle Verbindungen zu und von der Stadt mit der id cityID.
Aus den möglichen Ziel-IDs wir ein Array gebildet und ein 
zufälliges Element daraus zurückgeliefert.
**/
int randomCity(int cityID){

  int streets[10];
  int cnt = 0;
  int vis;

  for(int i = 0; i < sizeof(street) / sizeof(street[0]); i++){
    
    //Verbindungen von der Stadt weg
    if (street[i][0] == cityID){
      vis = visited(street[i][1]);
      if(vis == 0 || start->id == street[i][1]){
        streets[cnt] = street[i][1];
        cnt++;
      }
    }

    //Verbindungen zu der Stadt hin
    if (street[i][1] == cityID){
      vis = visited(street[i][0]);
      if(vis == 0 || start->id == street[i][0]){
          streets[cnt] = street[i][0];
          cnt++;
      }
    }
  }
  
  if(cnt > 0){
    //Zufälliges Element zurückliefern
    return streets[rand() % cnt];
  }else{
    //Sackgasse, cnt = 0
    return cnt;
  }
}

/**
Liefert einen Pointer auf die Stadt mit der id cityID
**/
struct City *getCityById(cityId){
  for(int i = 0; i < sizeof(city) / sizeof(city[0]); i++){
     if(city[i].id == cityId){
        return &city[i];
     }
  }
  return &city[0];
}

/**
Rekursive Funktion
Liefert -1, falls wieder am Ausgangspunkt angelangt.
Liefert 0, wenn keine weiteren Verbindungen möflich (Sackgasse)
Ruft sich selbst auf, um weitere zufällige Städte zu besuchen.
**/

int go(struct City *city){
  
  //Wenn in der Start-Stadt angelangt, die schon besucht wurde.
  //Hier wird nicht unterschieden, ob man am Ausgangspunkt deshalb zurückkehrt, weil man aus einer Sackgasse zurückgekommen ist ud noch weitere Routen möglich wären.
  if(city->id == start->id && start->visited == 1){
    return -1;
    
  }else{
    printf("\nVisiting %s", city->name);
    //Stadt als besucht markieren´
    city->visited = 1;
    //rndCity enthält die ID einer zufälligen Stadt, die besucht werden kann, oder 0 in Sackgasse.
    int rndCity; 
    //alle Nachbarstädte in zufälliger Reihenfolge besuchen, falls nicht zuerst die Rundreise am Ausgangspunkt endet.
    do{
      rndCity = randomCity(city->id);
      if (rndCity == 0) printf("\nSackgasse in %s", city->name);
      if (rndCity > 0) {
            struct City *nextCity = getCityById(rndCity);
            //Rekursiver Aufruf
            int next = go(nextCity);
            if(next == -1){
              //Rundreise zu Ende
              return next;
            }else{
              printf("\nZurück in %s", city->name);
              rndCity = randomCity(city->id);
            }
      }
    } while (rndCity > 0);
    return rndCity;
  }
}

//main method
int main(void){
  //init Randomizes
  //srand(time(NULL)); 
  /* Intializes random number generator */
  time_t t;
  srand((unsigned) time(&t));

  start = &city[rand() % (sizeof city / sizeof city[0])];
  int roundTrip = go(start);
  if(roundTrip == -1) printf("\nReturned to %s", start->name);
  return 0;
}
